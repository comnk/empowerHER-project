Multi-Agent systems: Simulation and applications
Advances in Practical Applications of Agents, Multi-Agent Systems, and Complexity: The PAAMS CollectionMulti-Agent Systems and Agent-Based SimulationAgent-Based Modeling and Simulation with SwarmTools and Techniques for Social Science SimulationNumerical SimulationMulti-Agent-Based Simulation VIMulti-Agent Systems for Concurrent Intelligent Design and ManufacturingDeveloping Multi-Agent Systems with JADEThe Multi-Agent Transport Simulation MATSimMulti-Agent and Multi-Agent-Based SimulationHolonic and Multi-Agent Systems for ManufacturingMulti Agent SystemsMulti-Agent-Based SimulationMulti-Agent SystemsAgent and Multi-Agent Systems: Technologies and ApplicationsMulti-Agent SystemsConsensus Tracking of Multi-agent Systems with Switching TopologiesFormation Control of Multi-Agent SystemsCooperative Control of Multi-Agent SystemsCooperative Control of Multi-Agent SystemsMulti-Agent Systems for Healthcare Simulation and Modeling: Applications for System ImprovementMulti-agent System for Simulation of Land-use and Land Cover ChangeMassively Multi-Agent Systems IIEnvironments for Multi-Agent SystemsMulti-Agent SystemsMultiagent SystemsCognition and Multi-Agent InteractionMulti-agent Systems for Traffic and Transportation EngineeringMulti-Agent Energy Systems SimulationCooperative Control of Multi-Agent SystemsMultiagent System TechnologiesMassively Multi-Agent TechnologyMulti-Agent Systems Modeling, Control, Programming, Simulations and ApplicationsMultiagent SystemsMulti-agent SystemsMulti-agent SystemsInnovations in Multi-Agent Systems and Application – 1Industrial Applications of Holonic and Multi-Agent SystemsDesign of Agent-Based ModelsMulti-Agent Systems Modeling, Interactions, Simulations and Case Studies

Dynamic structures in modeling and simulation: a reflective approach
As the number of flexible, adaptable systems grows so does the need for specification and analysis tools that support adaptable system structures. The increasing number of simulation tools that equip models with the capability of changing their behavior patterns, composition, and interactions raises the desire for a theoretical and methodological approach. A formalism is introduced based on DEVS which emphasizes the reflective nature of variable structure models. The proposed formalism and DEVS are shown to be bisimilar, which emphasizes the role of variable structure models as an agency of modularization. The formalism is used to reveal general problems and solutions in implementing variable structure models.

Plug'n simulate
Developments in simulation systems, e.g. new simulators, partitioning algorithms, modeling formalisms, or specialized user interfaces, often implies the realization of entire simulation systems from scratch. This requires significant efforts, and, in addition, it hampers the evaluation of the results achieved. The proposed plug 'n simulate concept enables developers to integrate their ideas into an existing framework and thus eases the development and the evaluation of results

Rule-based multi-level modeling of cell biological systems
Modeling dynamic environments in multi-agent simulation
2‐DE proteome analysis of a proliferating and differentiating human neuronal stem cell line (ReNcell VM)
The proteome of a proliferating human stem cell line was analyzed and then utilized to detect stem cell differentiation‐associated changes in the protein profile. The analysis was conducted with a stable human fetal midbrain stem cell line (ReNcell VM) that displays the properties of a neural stem cell. Therefore, acquisition of proteomic data should be representative of cultured human neural stem cells (hNSCs) in general. Here we present a 2‐DE protein‐map of this cell line with annotations of 402 spots representing 318 unique proteins identified by MS. The subsequent proteome profiling of differentiating cells of this stem cell line at days 0, 4 and 7 of differentiation revealed changes in the expression of 49 identified spots that could be annotated to 45 distinct proteins. This differentiation‐associated expression pattern was validated by Western blot analysis for transgelin‐2, proliferating cell nuclear antigen, as well as peroxiredoxin 1 and 4. The group of regulated proteins also included NudC, ubiquilin‐1, STRAP, stress‐70 protein, creatine kinase B, glial fibrillary acidic protein and vimentin. Our results reflect the large rearrangement of the proteome during the differentiation process of the stem cells to terminally differentiated neurons and offer the possibility for further characterization of specific targets driving the stem cell differentiation.

SESSL: A domain-specific language for simulation experiments
Grand challenges for modeling and simulation
A Spatial Extension to the π Calculus
Combining micro and macro-modeling in devs for computational biology
In computational biology there is an increasing need to combine micro and macro views of the system of interest. Therefore, explicit means to describe micro and macro level and the downward and upward causation that link both are required. Multi-Level-DEVS (or m^-DEVS) supports an explicit description of macro and micro level, information at macro level can be accessed from micro level and vice versa, micro models can be synchronously activated by the macro model and also the micro models can trigger the dynamics at macro level. To link both levels, different methods are combined, to those belong, value coupling, synchronous activations, variable ports, and invariants. The execution semantic of the formalism is given by an abstract simulator and its use is illustrated based on an small extract of the Wnt pathway.

Distributed, parallel simulation of multiple, deliberative agents
Multi agent systems comprise multiple, deliberative agents embedded in and recreating patterns of interactions. Each agent's execution consumes considerable storage and calculation capacities. For testing multi agent systems, distributed parallel simulation techniques are required that take the dynamic pattern of composition and interaction of multi-agent systems into account. Analyzing the behavior of agents in virtual, dynamic environments necessitates relating the simulation time to the actual execution time of agents. Since the execution time of deliberative components can hardly be foretold, conservative techniques based on lookahead are not applicable. On the other hand, optimistic techniques become very expensive if mobile agents and the creation and deletion of model components are affected by a rollback. The developed simulation layer of JAMES (a Java Based Agent Modeling Environment for Simulation) implements a moderately optimistic strategy which splits simulation and external deliberation into different threads and allows simulation and deliberation to proceed concurrently by utilizing simulation events as synchronization points.

Planning agents in JAMES
Testing is an obligatory step in developing multiagent systems. For testing multiagent systems in virtual, dynamic environments, simulation systems are required that support a modular, declarative construction of experimental frames, that facilitate the embedding of a variety of agent architectures and that allow an efficient parallel, distributed execution. We introduce the system JAMES (a Java based agent modeling environment for simulation). In JAMES, agents and their dynamic environment are modeled as reflective, time-triggered state automata. Its possibilities to compose experimental frames based on predefined components, to express temporal interdependencies, to capture the phenomenon of proactiveness and reflectivity of agents are illuminated by experiments with planning agents. The underlying planning system is a general-purpose system, about which no empirical results exist besides traditional static benchmark tests. We analyze the interplay between heuristics for selecting goals, viewing range, commitment strategies, explorativeness, and trust in the persistence of the world and uncover properties of the the agent, the planning engine, and the chosen test scenario: TILEWORLD.

Modeling and simulation of mobile agents
A flexible and scalable experimentation layer
Modeling and simulation frameworks for use in different application domains, throughout the complete development process, and in different hardware environments need to be highly scalable. For achieving an efficient execution, different simulation algorithms and data structures must be provided to compute a concrete model on a concrete platform efficiently. The support of parallel simulation techniques becomes increasingly important in this context, which is due to the growing availability of multi-core processors and network-based computers. This leads to more complex simulation systems that are harder to configure correctly. We present an experimentation layer for the modeling and simulation framework JAMES II. It greatly facilitates the configuration and usage of the system for a user and supports distributed optimization, on-demand observation, and various distributed and non-distributed scenarios.

Experiments with single core, multi-core, and GPU based computation of cellular automata
Cellular automata are a well-known modeling formalismexploited in a wide range of application areas. In many ofthose, the complexity of models hampers a thorough analysis ofthe system under study. Therefore, efficient simulation algorithmsare required. We present here a comparison of seven different simulation algorithms for cellular automata: the classical “full” simulator, the classical “discrete event” simulator, a threaded (multi core) variant of each of these, an adaptable threadedvariant, and a GPU based algorithm with and without readbackof calculated states. The comparison is done based on the M&Sframework JAMES II by using a set of well-known models.

Agents in discrete event simulation
Test beds for multi-agent systems provide the means for experimenting with multiple agents that act and interact concurrently in their environment. Mostly, test beds constitute specialized tools which provide speci c scenarios for testing speci c agentarchitectures. To facilitate reuse and a exible compositional construction of experimental frames for multiagent systems, JAMES, a Java Based Agent Modeling Environment for Simulation, explores the integration of agents within a general modeling and simulation formalism for discrete event systems. Therefore, a compositional and hierarchical model design which supports variable structure models is complemented with a distributed, concurrent execution. Two experiments with planning agents illustrate our approach.

Discrete event multi-level models for systems biology
Flexible experimentation in the modeling and simulation framework JAMES II—implications for computational systems biology
Dry-lab experimentation is being increasingly used to complement wet-lab experimentation. However, conducting dry-lab experiments is a challenging endeavor that requires the combination of diverse techniques. JAMES II, a plug-in-based open source modeling and simulation framework, facilitates the exploitation and configuration of these techniques. The different aspects that form an experiment are made explicit to facilitate repeatability and reuse. Each of those influences the performance and the quality of the simulation experiment. Common experimentation pitfalls and current challenges are discussed along the way.

Spatio-temporal model of endogenous ROS and raft-dependent WNT/beta-catenin signaling driving cell fate commitment in human neural progenitor cells
Canonical WNT/β-catenin signaling is a central pathway in embryonic development, but it is also connected to a number of cancers and developmental disorders. Here we apply a combined in-vitro and in-silico approach to investigate the spatio-temporal regulation of WNT/β-catenin signaling during the early neural differentiation process of human neural progenitors cells (hNPCs), which form a new prospect for replacement therapies in the context of neurodegenerative diseases. Experimental measurements indicate a second signal mechanism, in addition to canonical WNT signaling, being involved in the regulation of nuclear β-catenin levels during the cell fate commitment phase of neural differentiation. We find that the biphasic activation of β-catenin signaling observed experimentally can only be explained through a model that combines Reactive Oxygen Species (ROS) and raft dependent WNT/β-catenin signaling. Accordingly after initiation of differentiation endogenous ROS activates DVL in a redox-dependent manner leading to a transient activation of down-stream β-catenin signaling, followed by continuous auto/paracrine WNT signaling, which crucially depends on lipid rafts. Our simulation studies further illustrate the elaborate spatio-temporal regulation of DVL, which, depending on its concentration and localization, may either act as direct inducer of the transient ROS/β-catenin signal or as amplifier during continuous auto-/parcrine WNT/β-catenin signaling. In addition we provide the first stochastic computational model of WNT/β-catenin signaling that combines membrane-related and intracellular processes, including lipid rafts/receptor dynamics as well as WNT- and ROS-dependent β-catenin activation. The model’s predictive ability is demonstrated under a wide range of varying conditions for in-vitro and in-silico reference data sets. Our in-silico approach is realized in a multi-level rule-based language, that facilitates the extension and modification of the model. Thus, our results provide both new insights and means to further our understanding of canonical WNT/β-catenin signaling and the role of ROS as intracellular signaling mediator.

Discrete event, multi-level simulation of metabolite channeling
DONE