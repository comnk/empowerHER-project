Knowledge representation concepts for automated SLA management
RuleML 1.0: the overarching specification of web rules
Oasis legalruleml
Legal texts, e.g. legislation, regulations, contracts, and case law, are the source of norms, guidelines, and rules. As text, it is difficult to exchange specific information content contained in the texts between parties, to search for and extract structured content from the texts, or to automatically process it further. Legislators, legal practitioners, and business managers are, therefore, impeded from comparing, contrasting, integrating, and reusing the contents of the texts, since any such activities are manual. In the current web-enabled context, where innovative eGovernment and eCommerce applications are increasingly deployed, it has become essential to provide machine-readable forms (generally in XML) of the contents of the text.

A homogeneous reaction rule language for complex event processing
Event-driven automation of reactive functionalities for complex event processing is an urgent need in today's distributed service-oriented architectures and Web-based event-driven environments. An important problem to be addressed is how to correctly and efficiently capture and process the event-based behavioral, reactive logic embodied in reaction rules, and combining this with other conditional decision logic embodied, e.g., in derivation rules. This paper elaborates a homogeneous integration approach that combines derivation rules, reaction rules and other rule types such as integrity constraints into the general framework of logic programming, the industrial-strength version of declarative programming. We describe syntax and semantics of the language, implement a distributed web-based middleware using enterprise service technologies and illustrate its adequacy in terms of expressiveness, efficiency and scalability through examples extracted from industrial use cases. The developed reaction rule language provides expressive features such as modular ID-based updates with support for external imports and self-updates of the intensional and extensional knowledge bases, transactions including integrity testing and roll-backs of update transition paths. It also supports distributed complex event processing, event messaging and event querying via efficient and scalable enterprise middleware technologies and event/action reasoning based on an event/action algebra implemented by an interval-based event calculus variant as a logic inference formalism.

LegalRuleML: Design principles and foundations
A categorization scheme for SLA metrics
Abstract. Effective SLAs are extremely important to assure business continu-ity, customer satisfaction and trust. The metrics used to measure and manage performance compliance to SLA commitments are the heart of a successful agreement and are a critical long term success factor. Lack of experience in the use and automation of performance metrics causes problems for many organi-zations as they attempt to formulate their SLA strategies and set the metrics needed to support those strategies. This paper contributes to a systematic cate-gorization of SLA contents with a particular focus on SLA metrics. The in-tended goal is to support the design and implementation of automatable SLAs based on efficient metrics for automated monitoring and reporting . The catego-rization facilitates design decisions, analysis of existing SLAs and helps to identify responsibilities for critical IT processes in disruption management dur-ing the execution of SLAs. 1 Introduction Service Level Agreements (SLAs) defining the quality attributes (QoS - Quality of Service) and guarantees a service is required to process, are of growing commercial interest with a deep impact on the strategic and organisational processes, as many research studies and intensified interest in accepted management standards like ITIL

Legalruleml: Xml-based rules and norms
Rule-based event processing and reaction rules
Rbsla a declarative rule-based service level agreement language based on ruleml
This paper describes a rule based service level agreement language called RBSLA which is based on RuleML. With this language SLAs can be implemented in a machine readable syntax which can be fed into a rule engine in order to monitor the contract performance at run-time and automatically execute the contractual rules. The declarative logic based approach simplifies interchange, maintenance, management and execution of SLA rules and enables easy combination and revision of contractual rule sets and contract modules

The Gold Standard in Corpus Annotation.
Trustworthy corpora are necessary for training and meaningful evaluation of algorithms which use annotations. These standard collections are called Gold Standard Corpora (GSC). However the construction of GSC is a laborious and time-consuming process and size, quality and most of all availability of task-specific GSC directly influence the development of machine learning based natural language processing algorithms. This paper provides an introduction to gold standard corpus construction in the context of natural language processing and gives an overview of alternative approaches.

ECA-RuleML: An approach combining ECA rules with temporal interval-based KR event/action logics and transactional update logics
An important problem to be addressed within Event-Driven Architecture (EDA) is how to correctly and efficiently capture and process the event/action-based logic. This paper endeavors to bridge the gap between the Knowledge Representation (KR) approaches based on durable events/actions and such formalisms as event calculus, on one hand, and event-condition-action (ECA) reaction rules extending the approach of active databases that view events as instantaneous occurrences and/or sequences of events, on the other. We propose formalism based on reaction rules (ECA rules) and a novel interval-based event logic and present concrete RuleML-based syntax, semantics and implementation. We further evaluate this approach theoretically, experimentally and on an example derived from common industry use cases and illustrate its benefits.

A journey to Semantic Web query federation in the life sciences
Wireless sensor network for AI-based flood disaster detection
A logic based sla management framework
Management, execution and maintenance of Service Level Agreements (SLAs) in the upcoming service oriented IT landscape need new levels of flexibility and automation not available with the current technology. In this paper we evolve a rule based approach to SLA representation and management which allows a clean separation of concerns, i.e. the contractual business logic are separated from the application logic. We make use of sophisticated, logic based knowledge representation (KR) concepts and combine adequate logical formalisms in one expressive logic based framework called ContractLog. ContractLog underpins a declarative rule based SLA (RBSLA) language with which to describe SLAs in a generic way as machine readable and executable contract specifications. Based on ContractLog and the RBSLA we have implemented a high level architecture for the automation of electronic contracts a rule-based Service Level Management tool (RBSLM) capable of maintaining, monitoring and managing large amounts of complex contract rules. 1 Why declarative rule-based SLA representation? Our studies of a vast number of SLAs currently used throughout the industry have revealed that today’s prevailing contracts are plain natural language documents. Consequently, they must be manually provisioned and monitored, which is very expensive and slow, results in simplified SLA rules and is not applicable to a global distributed computing economy, where service providers will have to monitor and execute thousands of contracts. First basic automation approaches and recent commercial service management tools1 directly encode the contractual rules in the application logic using standard programming languages such as Java or C++. The procedural control flow must be completely implemented and business logic, data access and computation are mixed together, i.e. the contract rules are buried implicitly in the application code. SLAs are therefore hard to maintain and can not be adapted to new requirements without extensive reimplementation efforts. Consequently, the upcoming service orientation based on services that are loosely coupled across heterogeneous, dynamic environments needs new ways of knowledge representation with a high degree of flexibility in order to efficiently manage, measure and continuously monitor and enforce complex SLAs. Examples which illustrate this assertion are dynamic rules, dependent rules, graduated rules or normative rules with exceptions/violations 1 e.g. IBM Tivoli Service Level Advisor, HP OpenView, Remedy SLAs of rights and obligations, in order to pick up a few examples which frequently occur in SLAs: • Graduated rules are rule sets which e.g. specify graduated high/low ranges for certain SLA parameters so that it can be evaluated whether the measured values exceed, meet or fall below the defined service levels. They are often applied to derive graduate penalties or bonuses. Other examples are service intervals, e.g., “between 0 a.m. and 6 a.m. response time must be below 10 s, between 6 a.m. and 6 p.m. response time must be below 4 s ...” or exceptions such as maintenance intervals. • Dependent rules are used to adapt the quality of service levels. For example an reparation service level must hold, if a primary service level was missed (for the first time / for the umpteen times), e.g.: “If the average availability falls below 97 % then the mean time to repair the service must be less than 10 minutes.” • Dynamic rules either already exist within the set of contract rules or are added dynamically at run time. They typically define special events or non regular changes in the contract environment, e.g. a rule which states that there might be an unscheduled period of time which will be triggered by the customer. During this period the bandwidth must be doubled. • Normative rules with violations and exceptions define the rights and obligations each party has in the present contract state. Typically, these norms might change as a consequence of internal or external events / actions, e.g. an obligation which was not fulfilled in time and hence was violated, might raise another obligation or permission: “A service provider is obliged to repair an unavailable service within 2 hours. If she fails to do so the customer is permitted to cancel the contract.” The code of pure procedural programming languages representing this type of rules would be cumbersome to write and maintain and would not be considered helpful in situations when flexibility and code economy are required to represent contractual logic. In this paper we describe a declarative approach to SLA representation and management using sophisticated, logic based knowledge representation (KR) concepts. We combine selected adequate logical formalisms in one expressive framework called ContractLog. It enables a clean separation of concerns by specifying contractual logic in a formal machine-readable and executable fashion and facilitates delegating service test details and computations to procedural object-oriented code (Java) and existing management and monitoring tools. ContractLog is extended by a declarative rule based SLA language (RBSLA) in order to provide a compact and userfriendly SLA related rule syntax which facilitates rule interchange, serialization and tool support. Based on ContractLog and the higher-level RBSLA we have implemented a rule based service level management (RBSLM) prototype as a test bed and proof of concept implementation. The essential advantages of our approach are: 1. Contract rules are separated from the service management application. This allows easier maintenance and management and facilitates contract arrangements which are adaptable to meet changes to service requirements dynamically with the indispensable minimum of service execution disruption at runtime, even possibly permitting coexistence of differentiated

Rule responder: RuleML-based agents for distributed collaboration on the pragmatic web
The Rule Responder project (responder.ruleml.org) extends the Semantic Web towards a Pragmatic Web infrastructure for collaborative human-computer networks. These allow semi-automated agents - with their individual (semantic and pragmatic) contexts, decisions and actions - to form corporate, not-for-profit, educational, or other virtual teams or virtual organizations. The project develops an effective methodology and an efficient infrastructure to interchange and reuse knowledge (ontologies and rules). Such knowledge plays an important role for (semi-automatically and contextually) transforming data, deriving new conclusions and decisions from existing knowledge, and acting according to changed situations or occurred (complex) events. Ultimately, this might put AI theories on distributed multiagent systems into larger-scale practice and might form the basis for highly flexible and adaptive Web-based service-oriented/service-component architectures (SOAs/SCAs).

Fusion of background knowledge and streams of events
Usage of background knowledge about events and their relations to other concepts in the application domain can improve the expressiveness and flexibility of complex event processing systems. Huge amounts of domain background knowledge stored in external knowledge bases can be used in combination with event processing in order to achieve more knowledgeable complex event processing. In this paper, we discuss the benefits of background knowledge for event processing and describe different categories of event query rules. We propose different event processing approaches used for the fusion of background knowledge with real-time event streams, like plan-based event processing or event query preprocessing. We have implemented some of the proposed event processing methods for the stock market monitoring domain by using available real-time stock events and background knowledge about joint-stock companies from the linked open data. Our experiments show that some of the approaches can improve the performance of event processing compared to more basic approaches.

Reaction ruleml 1.0: Standardized semantic reaction rules
Distributed trust management for validating sla choreographies
Rif core dialect
Semantic Web knowledge representation standards have close relationships with rule-based languages and systems. In particular, the sparql query language can be seen as a rule language: answering a construct query is similar to applying a rule in forward chaining to enrich an rdf base, with the rule antecedent corresponding to the where clause and its consequent to the construct clause of the sparql query. In this paper we present the correspondances between sparql and rif, the rule interchange format recommended by the W3C. We have characterized the subset of sparql that can be expressed in rif and, conversely, we have searched for the maximal rif dialect that can be expressed in sparql. We have extended the Corese semantic engine which enables to query rdf/s data with sparql and is provided with both a forward and a backward chaining rule system, so that it now supports rif: we have developed (1) a rif parser which builds an internal representation of a rif rule into an abstract syntax tree (AST) and (2) a translator of a rif AST into a sparql AST so that Corese has become an implementation of a rif-sparql dialect.

Knowledge-based processing of complex stock market events
Usage of background knowledge about events and their relations to other concepts in the application domain, can improve the quality of event processing. In this paper, we describe a system for knowledge-based event detection of complex stock market events based on available background knowledge about stock market companies. Our system profits from data fusion of live event stream and background knowledge about companies which is stored in a knowledge base. Users of our system can express their queries in a rule language which provides functionalities to specify semantic queries about companies in the SPARQL query language for querying the external knowledge base and combine it with event data stream. Background makes it possible to detect stock market events based on companies attributes and not only based on syntactic processing of stock price and volume.

DONE