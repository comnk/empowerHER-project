Temporal Databases: Theory, Design, and Implementation
The consensus glossary of temporal database conceptsâ€”February 1998 version
A consensus glossary of temporal database concepts
This document contains definitions of a wide range of concepts specific to and widely used within temporal databases. In addition to providing definitions, the document also includes separate explanations of many of the defined concepts. Two sets of criteria are included. First, all included concepts were required to satisfy four relevance criteria, and, second, the naming of the concepts was resolved using a set of evaluation criteria. The concepts are grouped into three categories: concepts of general database interest, of temporal database interest, and of specialized interest. This document is a digest of a full version of the glossary1. In addition to the material included here, the full version includes substantial discussions of the naming of the concepts.The consensus effort that lead to this glossary was initiated in Early 1992. Earlier status documents appeared in March 1993 and December 1992 and included terms proposed after an initial glossary appeared in SIGMOD Record in September 1992. The present glossary subsumes all the previous documents. It was most recently discussed at the "ARPA/NSF International Workshop on an Infrastructure for Temporal Databases," in Arlington, TX, June 1993, and is recommended by a significant part of the temporal database community. The glossary meets a need for creating a higher degree of consensus on the definition and naming of temporal database concepts.

On an algebra for historical relational databases: Two views
In search of the appropriate semantics -for the inclusion of structures and operations that ~111 meet the needs of a wide class of users interested in a database system supporting temporal views of their data, the paper includes both a discussion of many problems that must be addressed, and a proposal for an extended relational algebra The informal dlscusslon of Issues motivates the proposal to time-stamp the attributes of relations, rather than the tuples The proposed algebra incorporates this view with a general treatment of non-first-normal-form relations Note Parts I and II were written and submitted independently by their respective authors to the 1985 SIGMOD Conference, they have been combined at the invitation of the 1985 SIGMOD Program Committee The names of the authors are llsted In alphabetlcal order

An efficient algorithm to update large itemsets with early pruning
We present an efficient algorithm (UWEP) for updating large itemsets when new transactions are added to the set of old transactions. UWEP employs a dynamic lookahead strategy in updating the existing large itemsets by detecting and removing those that will no longer remain large after the contribution of the new set of transactions. It differs from the other update algorithms by scanning the existing database at most once and the new database exactly once. Moreover, it generates and counts the minimum number of candidates in the new database. The experiments on synthetic data show that UWEP outperforms the existing algorithms in terms of the candidates generated and counted.

Adding time dimension to relational model and extending relational algebra
A. survey of entity resolution and record linkage methodologies
A great deal of research is focused on formation of a data warehouse. This is an important area of research as it could save many computation cycles and thus allow accurate information provided to the right people at the right time. Two considerations when forming a data warehouse are data cleansing (including entity resolution) and with schema integration (including record linkage). Uncleansed and fragmented data requires time to decipher and may lead to increased costs for an organization, so data cleansing and schema integration can save a great many (human) computation cycles and can lead to higher organizational efficiency. In this study we survey the literature for the methodologies proposed or developed for entity resolution and record linkage. This survey provides a foundation for solving many problems in data warehousing. For instance, little or no research has been directed at the problem of maintenance of cleansed and linked relations.

A temporal query system for protocol-directed decision support
Abstract: Chronus is a query system that supports temporal extensions to the Structured Query Language (SQL) for relational databases. Although the relational data model can store time-stamped data and can permit simple temporal-comparison operations, it does not provide either a closed or a sufficient algebra for manipulating temporal data. In this paper, we outline an algebra that maintains a consistent relational representation of temporal data and that allows the type of temporal queries needed for protocol-directed decision support. We also discuss how Chronus can translate between our temporal algebra and the relational algebra used for SQL queries. We have applied our system to the task of screening patients for clinical trials. Our results demonstrate that Chronus can express sufficiently all required temporal queries, and that the search time of such queries is similar to that of standard SQL.

Time-by-example query language for historical databases
The authors propose a graphical query language, Time-by-Example (TBE), which has suitable constructs for interacting with historical relational databases in a natural way. TBE is user-friendly. It follows the graphical, two-dimensional approach of such previous languages as Query-by-Example (QBE), Aggregation-by-Example (ABE), and Summary-Table-by-Example (STBE). TBE also uses the hierarchical window (subquery) concept of ABE and STBE. TBE manipulates triple-valued (set-triple-valued) attributes and historical relations. Set-theoretic expressions are followed to deal with time intervals. The BNF specification for TBE is given. >

Temporal relational data model
This paper proposes a novel, efficient and robust tuple time stamped hybrid historical relational model for dealing with temporal data. The primary goal of developing this model is to make it easier to manage historical data robustly with minimal space requirements and retrieve it more quickly and efficiently. The model's efficiency and results were revealed when it was applied to an employee database. The proposed model's performance in terms of query execution time and space requirements is compared to a single relational data model. The obtained results show that the proposed model is approximately 20% faster than the conventional single relational data model. Memory consumption results also show that the proposed model's memory cost at different frequencies is significantly reduced, which is approximately 30% less than the single relational data model for a set of queries. Because net cost is strongly related to query execution time and memory cost, the suggested model's net cost is also significantly reduced. The proposed tuple timestamp hybrid historical model acts as generic, accurate and robust model. It provides the same functionality as previous versions, as well as hybrid functionality of previously proposed models, with a significant improvement in query execution speed and memory usage. This model is effective and reliable for the use in a wide range of temporal database fields, including insurance, geographic information systems, stocks and finance (e.g. Finacle in Banking), data warehousing, scientific databases, legal case histories, and medical records.

Managing different time granularities of clinical information by an interval-based temporal data model
Abstract: In the field of databases, time management at different levels of granularity has been an issue for several years, for instance when dealing with clinical information from different databases using different time units, dealing with natural language expressions, or when dealing with temporal uncertainty. A temporal data model is proposed to manage the temporal aspect of data, presented at various and mixed levels of granularity. The concept of temporal assertions shapes the entire temporal information. The model provides a temporal dimension to the data by using intervals that can be specified at different granularities. The model supports a three-valued logic, where True, False and Undefined are the truth values. The temporal data model allows to manage some degrees of uncertainty when establishing temporal relationships between intervals or between temporal assertions, expressed at different granularities. The logical connectives and quantifiers can manage each of the three truth-values. We applied the temporal data model by implementing an object-oriented database system for managing follow-up clinical data from patients who underwent percutaneous transluminal coronary angioplasty.

Discovery of association rules in temporal databases
Temporal databases naturally contain a wealth of information that can be unearthed by knowledge discovery and data mining techniques. Discovering association rules in market basket data have been widely studied and many algorithms have been developed. In this study, we examine discovery of association rules in temporal databases. We use the enumeration operation of the temporal relational algebra to prepare the data for discovery of association rules. To observe the changes in association rules and their statistics over the time, we can apply an incremental association rule mining technique to a series of datasets obtained over consecutive time intervals

Nested historical relations
The paper extends nested relations for managing temporal variation of complex objects. It combines the research in temporal databases and nested relations for nontraditional database applications. The basic modelling construct is a temporal atom as an attribute value. A temporal atom consists of two components, a value and temporal set which is a set of times denoting the validity period of the value. We define algebra operations for nested historical relations. Data redundancy in nested historical relations is also discussed and criteria for well-structured nested relations are established.

A statistical interface for historical relational databases
A historical database is a vast source of data for statistical analysis. The paper presents a statistical interface for historical relational databases with an underlying data model which uses attribute time-stamping. The statistical interface we propose includes aggregate functions and transformations of data into tabular forms suitable for advanced statistical analysis and is capable of dealing with the subtle semantics of time and various issues associated with it. A new operation, called enumeration, is introduced into historical relational algebra. The enumeration operation derives a table of uniform data, for a set of specified time points or intervals, from a three dimensional historical relation. We also give a method for normalizing historical relations and aligning the time of their attributes.

HQUEL, a query language for historical relational databases
The expressive power of temporal relational query languages
The authors consider the representation of temporal data based on tuple and attribute timestamping. They identify the requirements in modeling temporal data and elaborate on their implications in the expressive power of temporal query languages. They introduce a temporal relational data model where N1NF relations and attribute timestamping are used and one level of nesting is allowed. For this model, a nested relational tuple calculus (NTC) is defined. They follow a comparative approach in evaluating the expressive power of temporal query languages, using NTC as a metric and comparing it with the existing temporal query languages. They prove that NTC subsumes the expressive power of these query languages. They also demonstrate how various temporal relational models can be obtained from the temporal relations by NTC and give equivalent NTC expressions for their languages. Furthermore, they show the equivalence of intervals and temporal elements (sets) as timestamps in their model.

A survey of version control systems
â€” Version control has been an essential aspect of any software development project since early 1980s. In the recent years, however, we see version control as a common feature embedded in many collaborative based software packages; such as word processors, spreadsheets and wikis. In this paper, we explain the common structure of version control systems, provide historical information on their development, and identify future improvements.

A historical query language
Temporal Databases: Theory
A Generalized relational Framework for Modeling Temporal Data.
DONE